/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-29T07:07:57.417Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "Delete user with Id", nickname = "deleteUser", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get user by Id", nickname = "getUserById", notes = "", response = User.class, tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = User.class),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get users", nickname = "getUsers", notes = "", response = User.class, responseContainer = "List", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "firstname", required = false) String firstname,@ApiParam(value = "") @Valid @RequestParam(value = "lastname", required = false) String lastname,@ApiParam(value = "") @Valid @RequestParam(value = "roleId", required = false) Long roleId);


    @ApiOperation(value = "Set user by Id", nickname = "setUserById", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setUserById(@ApiParam(value = "",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user);

}
