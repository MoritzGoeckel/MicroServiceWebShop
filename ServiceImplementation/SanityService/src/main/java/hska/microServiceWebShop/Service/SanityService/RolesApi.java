/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package hska.microServiceWebShop.Service.SanityService;

import hska.microServiceWebShop.models.Role;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-03T18:07:35.042Z")

@Api(value = "roles", description = "the roles API")
public interface RolesApi {

    @ApiOperation(value = "Create role", nickname = "createRole", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/roles",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createRole(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Role role);


    @ApiOperation(value = "Delete role with Id", nickname = "deleteRole", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/roles/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRole(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get role by Id", nickname = "getRoleById", notes = "", response = Role.class, tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Role.class),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/roles/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Role> getRoleById(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get roles", nickname = "getRoles", notes = "", response = Role.class, responseContainer = "List", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Role.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Role>> getRoles(@ApiParam(value = "") @Valid @RequestParam(value = "typ", required = false) String typ,@ApiParam(value = "") @Valid @RequestParam(value = "level", required = false) Integer level);


    @ApiOperation(value = "Set role by Id", nickname = "setRoleById", notes = "", tags={ "userRole", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 403, message = "error") })
    @RequestMapping(value = "/roles/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setRoleById(@ApiParam(value = "",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Role role);

}
